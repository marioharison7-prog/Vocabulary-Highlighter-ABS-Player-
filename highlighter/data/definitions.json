{
    "democracy": {
        "definition": "The idea of democracy originated in Ancient Greece.",
        "color": "orange",
        "time": "2025-10-12T11:27:03+02:00"
    },
    "sympathy": {
        "definition": "is emphithize related to this ???",
        "color": "white",
        "time": "2025-10-19T11:56:31.622Z"
    },
    "shouting out": {
        "definition": "???",
        "color": "white",
        "time": "2025-10-19T11:56:30.990Z"
    },
    "locked up": {
        "definition": "????",
        "color": "white",
        "time": "2025-10-19T11:56:25.926Z"
    },
    "saving up": {
        "definition": ";;",
        "color": "white",
        "time": "2025-10-19T11:56:30.278Z"
    },
    "occur": {
        "definition": "happen but in a from way.",
        "color": "orange",
        "time": "2025-10-15T06:31:27+02:00"
    },
    "cuff": {
        "definition": "cuff vs cliff ???",
        "color": "white",
        "time": "2025-10-19T11:56:21.166Z"
    },
    "mingle": {
        "definition": "to get mixed  into the socity  or anything else (long story short mix)",
        "color": "green",
        "time": "2025-10-14T15:04:20.643Z"
    },
    "mingles": {
        "definition": "to get mixed  into the socity  or anything else (long story short mix)",
        "color": "green",
        "time": "2025-10-14T15:08:24.800Z"
    },
    "open everything back up": {
        "definition": "open up and back up",
        "color": "white",
        "time": "2025-10-19T11:56:26.733Z"
    },
    "disease": {
        "definition": "So \u201cdisease\u201d means \u201cnot at ease\u201d, or \u201cillness.\u201d",
        "color": "orange",
        "time": "2025-10-14T15:07:50.160Z"
    },
    "decease": {
        "definition": "\u201cdecease\u201d literally means \u201cto depart (from life)\u201d \u2192 death.",
        "color": "orange",
        "time": "2025-10-14T15:07:14.277Z"
    },
    "grew out": {
        "definition": "???",
        "color": "white",
        "time": "2025-10-19T11:56:22.966Z"
    },
    "look up": {
        "definition": "eee",
        "color": "green",
        "time": "2025-10-15T16:55:39.286Z"
    },
    "come up": {
        "definition": "fff",
        "color": "white",
        "time": "2025-10-19T11:56:20.294Z"
    },
    "wake up": {
        "definition": "ddd",
        "color": "green",
        "time": "2025-10-23T09:53:46+02:00"
    },
    "pavlov": {
        "definition": "d",
        "color": "white",
        "time": "2025-10-19T11:56:33.662Z"
    },
    "try out": {
        "definition": "verb",
        "color": "white",
        "time": "2025-10-19T11:56:32.182Z"
    },
    "i&#039;d never given much thought to how i would die": {
        "definition": "fff",
        "color": "#ffffff",
        "time": "2025-10-15T22:50:29+02:00"
    },
    "came back": {
        "definition": "come back",
        "color": "white",
        "time": "2025-10-19T11:56:18.557Z"
    },
    "by any means": {
        "definition": "??????",
        "color": "white",
        "time": "2025-10-19T11:56:29.230Z"
    },
    "day to day": {
        "definition": "???",
        "color": "white",
        "time": "2025-10-19T11:56:22.006Z"
    },
    "bjarne stroustrup": {
        "definition": "c++ creater",
        "color": "white",
        "time": "2025-10-19T11:56:16.797Z"
    },
    "dime": {
        "definition": ";;;;;",
        "color": "",
        "time": "2025-10-18T11:06:59.327Z"
    },
    "freaking out": {
        "definition": "?,,??",
        "color": "",
        "time": "2025-10-18T11:09:11.850Z"
    },
    "get away": {
        "definition": "????",
        "color": "",
        "time": "2025-10-18T11:09:36.602Z"
    },
    "blind spot": {
        "definition": "yes",
        "color": "yellow",
        "time": "2025-10-18T13:10:20+02:00"
    },
    "grace": {
        "definition": "grace of God",
        "color": "",
        "time": "2025-10-18T11:10:47.996Z"
    },
    "pants": {
        "definition": "???",
        "color": "",
        "time": "2025-10-18T11:11:01.860Z"
    },
    "get around": {
        "definition": "?????",
        "color": "",
        "time": "2025-10-18T11:11:24.573Z"
    },
    "appoint": {
        "definition": "?? it's related to appointment but this form is unkown for me!",
        "color": "#096fab",
        "time": "2025-10-19T06:34:08+02:00"
    },
    "shine": {
        "definition": "To shine is to make a bright light.\n\u2192 The candles are shining in the dark room.",
        "color": "yellow",
        "time": "2025-10-20T03:51:44.812Z"
    },
    "mount": {
        "definition": "?",
        "color": "#096fab",
        "time": "2025-10-19T09:51:09+02:00"
    },
    "soak": {
        "definition": "is to leave something underwater for periode of time",
        "color": "",
        "time": "2025-10-19T09:26:06.816Z"
    },
    "fatigue": {
        "definition": "to be tired",
        "color": "yellow",
        "time": "2025-10-20T03:51:35.796Z"
    },
    "pre-soaked": {
        "definition": "some is underwater for a while for exmple: pre-soaked rice .",
        "color": "yellow",
        "time": "2025-10-23T17:02:30+02:00"
    },
    "turned in": {
        "definition": "mean to convert from state to another\ni think there's more one meaning but all need to know now is this.",
        "color": "#FF0000",
        "time": "2025-10-22T19:55:30+02:00"
    },
    "humored": {
        "definition": "humor means to You do or agree with something to please someone else, even if you don\u2019t really feel the same way.\n\nWas he trying to change how he spoke since he was now a high schooler? She was as humored as she was prideful .",
        "color": "#FF0000",
        "time": "2025-10-19T13:57:03+02:00"
    },
    "right then": {
        "definition": "???",
        "color": "#096fab",
        "time": "2025-10-19T13:47:33+02:00"
    },
    "\u201ci think around the time when i first got my check": {
        "definition": "????",
        "color": "#FF0000",
        "time": "2025-10-19T13:56:40+02:00"
    },
    "no more, no less": {
        "definition": "it's useful",
        "color": "green",
        "time": "2025-10-19T13:54:46+02:00"
    },
    "help out": {
        "definition": "??? it's means help or anything else check this",
        "color": "white",
        "time": "2025-10-19T11:56:23.853Z"
    },
    "accustomed": {
        "definition": "When you are accustomed to something, it feels normal or natural to you because it happens regularly.",
        "color": "#096fab",
        "time": "2025-10-20T05:59:24+02:00"
    },
    "back in the past": {
        "definition": "??",
        "color": "#096fab",
        "time": "2025-10-20T06:00:22+02:00"
    },
    "hold in": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-20T06:01:52+02:00"
    },
    "raspberry": {
        "definition": "https:\/\/t3.ftcdn.net\/jpg\/05\/29\/42\/04\/360_F_529420429_JkNogYEN0gi125iMi8e3xqtPyvl0Txpk.jpg",
        "color": "yellow",
        "time": "2025-10-20T06:07:30+02:00"
    },
    "plum": {
        "definition": "https:\/\/www.google.com\/imgres?q=plum&imgurl=https%3A%2F%2Fwww.chandigarhayurvedcentre.com%2Fwp-content%2Fuploads%2F2024%2F05%2Fnatural-fresh-plum-fruits-305.jpg&imgrefurl=https%3A%2F%2Fwww.chandigarhayurvedcentre.com%2Fblog%2Fplum%2F%3Fsrsltid%3DAfmBOop7z1_HX23PM9nJmdCNhmnFexDmgxw9_9yCjJZLZ8smdAH-irKk&docid=iFxHy_BE0lHsgM&tbnid=kP3vDoi-Ov3MsM&vet=12ahUKEwicxbm087GQAxUuh_0HHc7pGUoQM3oECBgQAA..i&w=500&h=342&hcb=2&ved=2ahUKEwicxbm087GQAxUuh_0HHc7pGUoQM3oECBgQAA",
        "color": "#096fab",
        "time": "2025-10-20T06:07:24+02:00"
    },
    "syrup": {
        "definition": "it's like sweat liquid or something like this but hey i don't what is it exactly",
        "color": "#FF0000",
        "time": "2025-10-20T06:12:16+02:00"
    },
    "make up": {
        "definition": "yes i'm familliar with it",
        "color": "yellow",
        "time": "2025-10-20T06:16:09+02:00"
    },
    "back then": {
        "definition": "??",
        "color": "#FF0000",
        "time": "2025-10-20T06:18:35+02:00"
    },
    "meet up": {
        "definition": "N???",
        "color": "#FF0000",
        "time": "2025-10-20T06:19:19+02:00"
    },
    "once in a while": {
        "definition": "??",
        "color": "#FF0000",
        "time": "2025-10-20T06:19:43+02:00"
    },
    "hesitated": {
        "definition": "Pause before saying or doing something, especially through uncertainty.",
        "color": "#096fab",
        "time": "2025-10-20T06:23:35+02:00"
    },
    "glared": {
        "definition": "It\u2019s a sharp, angry stare \u2014 not just looking, but looking with anger in your eyes. \ud83d\udc40",
        "color": "#096fab",
        "time": "2025-10-20T06:26:28+02:00"
    },
    "lean over": {
        "definition": "???",
        "color": "#096fab",
        "time": "2025-10-20T06:28:57+02:00"
    },
    "express": {
        "definition": "So in this case, \u201cExpress\u201d = quick \/not \u201cto say aloud.\u201d",
        "color": "#096fab",
        "time": "2025-10-21T09:09:43+02:00"
    },
    "terrific": {
        "definition": "Meaning: Very good, excellent, amazing.\n\nExample: \u201cThat movie was terrific!\u201d \u2192 It was really great.",
        "color": "#096fab",
        "time": "2025-10-21T09:12:37+02:00"
    },
    "parentheses": {
        "definition": "this is a real example of this  => ()",
        "color": "#096fab",
        "time": "2025-10-21T09:15:28+02:00"
    },
    "chasm": {
        "definition": "Chasm = gap you might cross.\nAbyss = endless depth you cannot cross.\na break or space in an object or between two objects.",
        "color": "#096fab",
        "time": "2025-10-22T17:08:38+02:00"
    },
    "oughta": {
        "definition": "it's\u00a0from of ought but in informal conversation",
        "color": "#096fab",
        "time": "2025-10-23T09:53:09+02:00"
    },
    "ice hockey jersey": {
        "definition": "it's an shirt",
        "color": "#096fab",
        "time": "2025-10-21T09:57:12+02:00"
    },
    "obliged": {
        "definition": "To feel grateful or thankful,",
        "color": "#096fab",
        "time": "2025-10-23T09:53:34+02:00"
    },
    "got off with": {
        "definition": "\u201cGot off with\u201d\nInformal phrase meaning: finished dealing with someone or finished a meeting\/conversation with them.\nExample: \u201cI just got off with my boss.\u201d \u2192 I just finished talking to my boss.",
        "color": "#096fab",
        "time": "2025-10-21T09:59:13+02:00"
    },
    "commendation": {
        "definition": "honor someone for something good he did",
        "color": "#096fab",
        "time": "2025-10-21T10:01:36+02:00"
    },
    "i always showed up on time, never called in sick, so...": {
        "definition": "???",
        "color": "",
        "time": "2025-10-21T08:03:09.337Z"
    },
    "reverse layup": {
        "definition": "https:\/\/www.youtube.com\/shorts\/OUO94jaAvz4\nIt's about the method or the strategy. \nthe player used to trick the defender",
        "color": "#096fab",
        "time": "2025-10-21T11:32:47+02:00"
    },
    "eurostep": {
        "definition": "it's a dribble like acting there is a link if you get stuck \nhttps:\/\/www.youtube.com\/shorts\/kUfREWXZBdA",
        "color": "#096fab",
        "time": "2025-10-21T12:06:34+02:00"
    },
    "slick": {
        "definition": "slick means smooth, stylish, skillful\nWhen a move is \u201cslick\u201d, it means it\u2019s done with style and control \u2014 the player makes it look effortless and cool.",
        "color": "#096fab",
        "time": "2025-10-21T12:09:49+02:00"
    },
    "timberwolves": {
        "definition": "The Minnesota Timberwolves are an American professional basketball team based in Minneapolis. The Timberwolves compete in the National Basketball Association as a member of the Northwest Division of the Western Conference. Wikipedia\nLocation: Minnesota, United States\nOwners: Alex Rodriguez, Marc Lore\nHead coach: Chris Finch\nArena\/Stadium: Target Center\nPresident: Tim Connelly\nConference: Western Conference",
        "color": "#096fab",
        "time": "2025-10-21T12:11:28+02:00"
    },
    "jersey": {
        "definition": "Jersey means:\nA sports shirt that players wear during a game \u2014 it usually has their team name, number, and sometimes their last name on it.\nin simple words it's the shirt the team wear during the game",
        "color": "#096fab",
        "time": "2025-10-21T12:13:44+02:00"
    },
    "rip": {
        "definition": "1\ufe0f\u20e3 Physical meaning (tear or destroy)\nrip = tear something quickly or forcefully <=====\nExamples:\nHe ripped his jersey during the game. \u2192 He tore it.\nShe ripped the paper in half. \u2192 She tore it apart.\nSo, \u201crip\u201d = tear.\n---------------------------------------------------------------\n\ud83d\udc80 2\ufe0f\u20e3 R.I.P. (Rest In Peace)\nYou\u2019ll often see RIP when someone dies.\nRIP Kobe Bryant \u2192 means Rest in Peace.\n----------------------------------------------------------------\n\ud83d\ude0e 3\ufe0f\u20e3 Slang (do something powerfully or quickly)\nIn casual speech, \u201crip\u201d can also mean:\n\u201cdo something intensely \/ really well \/ go hard.\u201d",
        "color": "#ffffff",
        "time": "2025-10-21T12:16:29+02:00"
    },
    "dribble": {
        "definition": "The dribble is a tactic used by players to confuse their opponents.",
        "color": "#096fab",
        "time": "2025-10-21T12:18:33+02:00"
    },
    "one hand washes the other": {
        "definition": "people should help each other, because when you help someone, they\u2019ll help you in return.",
        "color": "#096fab",
        "time": "2025-10-21T12:30:47+02:00"
    },
    "you scratch my back...": {
        "definition": "It\u2019s about mutual benefit, exchange of favors, or cooperation.",
        "color": "#096fab",
        "time": "2025-10-21T12:31:46+02:00"
    },
    "board": {
        "definition": "Board => get on (a vehicle, ship, or plane)\nIt means to enter or go onto something for travel \u2014 not to leave.\n\u2705 Examples:\nWe\u2019re boarding the plane now. \u2192 We\u2019re getting on the plane.\nPassengers, please board the train. \u2192 Please get in the train.",
        "color": "#096fab",
        "time": "2025-10-21T13:12:31+02:00"
    },
    "on-time": {
        "definition": "On Time For examples:\n\u201cOn-time\u201d = arriving exactly at the time of your appointment (not late).\n`On-time arrival`= On the exact time of the board.",
        "color": "#096fab",
        "time": "2025-10-21T13:18:50+02:00"
    },
    "courtesy": {
        "definition": "Courtesy = kindness \/ favor \/ polite gesture.!\n\u201cCourtesy booking\u201d = a booking given as a favor, not because you demanded it.",
        "color": "#096fab",
        "time": "2025-10-21T13:48:56+02:00"
    },
    "game show host": {
        "definition": "She's now a game show host \nShe runs the show and talks to contestants. \nby the way contestants who plays on the contest get prize maybe.",
        "color": "#096fab",
        "time": "2025-10-21T13:29:22+02:00"
    },
    "refund": {
        "definition": "Refund=>\nMeaning: Getting your money back after buying something, usually because:\nYou didn\u2019t like it\nIt was defective\nThe service didn\u2019t happen",
        "color": "orange",
        "time": "2025-10-21T13:31:14+02:00"
    },
    "duffel": {
        "definition": "data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMVFhUXFhcXGRcYFxcaGRcYGBcYGBgYFxgYHSggGB4lHRYXIjEhJSkrLi4uGB8zODMtNygtLisBCgoKDg0OGxAQGy0lICUrLS0tLS0tLS0tLS0tLS0tLS0tLS01LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAMMBAwMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAwQFBgcCAQj\/xAA+EAACAQIDBAcGBAQGAwEAAAABAgADEQQSIQUxQVEGEyJhcYGRBzJCobHBUnLR8BRisuEjM0OCosIVkvHS\/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF\/8QAJBEBAQACAgICAwADAQAAAAAAAAECEQMxEiEEQRMiURQyYaH\/2gAMAwEAAhEDEQA\/ANxhCEAIQhACEIQAhCEAIQhACJYrELTUs24fu0Vle6XYwKKasbAm5J0A3AXO4DU6mLK6i+PHyykRG3+mD0lzrYa2VdDc95MhaHT\/ABQ39W3ivHyIlV6VbRBr1KdR1TI2VQTa6aWZb2JDcDGdPGKQApB0G619d0w8snoTj49dNFo+0ZvjoqfAkfW8kKPtCpH3qTDwIP6TLTWN\/d4ceA4T3+L1tx3dw8RDzyK8HHfprtHpxhiLkVFHMgW+sc4bphg33Vh5g29bWmJjNVOZyQg3KTv\/AJqn2XcIt1i8xpK\/JU\/42FbxR2rQf3a1M\/71v6XjtWB1Gonz4uKAt27Anfrr4SaTbtegA1KoyC24Wse8g6ExzkZ5fFn1W1QmbbC9o7XC4lMwPxoLEeK7j5W8JoOCxtOqoemwZTxH0I3g9xmkylc2fHlh2cQhCNAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEA8Y21Mzbphj2qVEJ93tZRy3AHxsT6y5dJ8b1dLKPefTy4\/p5yoV8F1tF6lu1SAb\/ab5vsfKZZ3fp1\/HxmM86mOiu1KWJUUa6I1RBZS6g518+I4+vOIdJPZdgMWUYIcMVzXOHWnTz5re\/wBnW1tD3mUxMRlIdWsQbgg6g85pfRPpAuKQgkdalswHEcGHj9YYZb9Uc\/HcL5YqW\/saQf5W0MUv5sr\/AKRs\/sjxQ9zaQP58Op7t+aa3CX4xhOXOfbE8b7M9qqDlq4SqORDofpb5ytYrojtGib18HWZV40ctUE\/i0JNrcMs+kYQ8Iqc+T5\/ToptHE0RUpUHUNoufKjAX1bKe1c6Aabs3OSGD2JjEUU8VRB4Zl0Y+KkAHy9JuE5dARYgEHgRcSbxxc+Td+4xCpgirCwuN1\/l6yd2TiXwxFRWPevBhyInHtAr1MNjVWkitTqU1YobghszKcrDdoBvBnDPny20Fr2PPlM76rqlmeO2o7Pxi1aa1F3EbuR5RzIPootqXpJyb43cefyY+OVkEIQjQIQhACEIQAhCEAIQhACEIQAhCEAIRtjsclJbtfuAF2PgJA1ekj69lUHAE5m8TbQeGvjFcpF4ceWXSwYnFonvsBfcOJ8ANTGrbaoj4j6GUrGbVF2bfxJ5+ciH2qTxtz7u6ZXk\/jqx+LPutJ\/8AP0eben95xW6R4dRfMT3AazLMZtQqLgFvE6ekQwWPNQ3J1h+Sq\/xsFq2ptM1nLHwA5DlJbo7tCjTpv1nxG1rXFh\/ckeUoO2NtJh1BY9pvdXieZ8BIYdLmIsiaCTLd7aZYY2eKJ2t0fxQr1RRQvTFRurOYC6XOXQnQ2tLP7KqGLw2PRq1KolJ0dGYlSouMyk2OnaUDzkWm3cQx7K+fCSOE2zieY8TuhvQvHLNN3Ssp3MD4ETuYqnSCou9x9PQbzJLD9J6wNgxPqAPWX+VhfifytYhM6odLaw+IHx1kjR6YPxVTH+SIvxc4ukJW6HSsHenoYntvplToUTUCEm4Fj3+EqZSs7w5zuK30+q5sXYfCir9W\/wCwnXR3ZnXiooNmUBl7+BB+Uqu0ekFSrUeotAlmN7nQeWYjSWr2XYqrUrVOsKjKnuqQbAkb7bt0zmNt26cs5hx6l9rjsQZAAdLj0tJmMsXhb3K8d4+4\/f8AdlgsYyjKdbc\/3pLl8fTDKfk\/aJqEyjpJ03rLiMlRamHp2Azq5bI4J7TAAZkII5\/pb+i3SkVwEqZS+gDocyP39n3fO0qXbO8dna0QhCNAhCEAIQhACEIQAhCNNq7QShSaq+5Ru4k8APGAdY3H06QvUcLfdzPgN5la2p0iLHsMUQcfibz4eXrKXX2u1Woarm7Ne3JV4ADgJHYvGsxtfSY5Z3qO7i+PJN5LHj9v3+Ik95kbQr1KzWGi8ZDq990m9nnKmm+ZuqanRDaFcKGA1GoHPx9ZBUX4ctw5SUxK3ufGVxsYlNnZ2sqi5\/QczGm1IVsRkBLEADeToB4mQlTpJTW\/UjrG8wnmTv8AKMqFNtouS7GlQU6LY695Puk\/SSGB2IvXogX\/AA07TsNQbDNa\/HgPOPUiPK3rp1R2calRGxBNSvUsSPhReCgeElq+DGfIOyi77aXPIRTo8hd62IcalyiDkBvt5WidauMr1T7oJA7yDb6xNJJoli8Wq9kblF\/CMaGJZ1NZvcBy01\/E36Cc1cKzhKP+pVPWVD+BPhB5aR9Vph69OioslMX8hAvde4akVsTrUYX7kH28Y9R7aA3Mah8zOb9hNT3n4R4RWihIzHQHUDie8xKh6ta28z0Y8DjeV7EVsxJY2ReXxdwjjBoWXrH7K\/CvdDQ2m6eNLbjac49M1NgKjqx3EEbwDbfOdk4Y1e17tIe8\/wBl5k\/KJdIdtqoyUwBbdYfXmfGOeiy1Zqq3U2cx9+vUPnb6S29AaFOkKuh1NM3J\/OPvI3YtNqw\/xFA5MB\/Uv3HoZNYnZb0qLkHL7na3jLnFyDu3GO23tnMcZ1F5w2Nddzv4Ekj5x+m176Oqt5aylbCx+liS1rWY7jv0B42+8kMXj2VS1gAOP\/2OZUrx436WXEjCVB\/i0VI\/mAP1mfbc6GH+MGIwLhKejGkXamM4NyoAGXIw7wRw03eVOkNRb5aFRzzJAv6jTzjjY+1qlTruuouAcvV3y3HvFuOgHY1O\/XfH5IvFJde2m7Ixoq0kcKyG2qP7ykaENz14i4O8Egx7Mrp1qinTysTJPD7Tr27NRh3E3HoY5yM8vi\/ytBhKpgukdVdKqBu8af2kvQ2\/QY2LhDyYj9ZcylY5cOWPaUhPAZ7KZCEIQAmUe0DbvWl8rWRAQmtgT+LvJI0ly6dbY6igEU9uqco7l+I\/QecxXpviAKdNe0HJL37YBUHKq2JCm4LNfW0Xd0vH9ZtNYO2SmoNyUX+kXMb4lDeQ\/QOvdnJPugKo5akm0tOMw9905\/t6Uu4j8IOPKTuBF6ZbnoPAf3+khXTKLc5aKdG1NV5KP7\/OBoTaNUIjMxsoBJJ4CZTtTENiaqqgNidF53O\/xtJjpz0kFdzQon\/CQ9ph\/qMOX8o4c9\/KSns+2Dr\/ABNQaD3AefOVPXtlb53UWPA7MP8Ah0UvTJAUXFwCRvPcDvsecr1ba2djTXDqbFMzrmBbMoe1msE0KqMxvfjLntOtko1KgtnVSKZIvZ2GS4HE9u1u+V3YWwEcIrXV6q5qjj4bjQgbuz2QAe7nKxskRyY5XK6upDTH7cagy0zQr00NsucLmIZQSQBcEaqLgneNbx6cjqilkCgghW7J01sbnv5SOpIcdiqmKdSiUiQqdnfeyjS40VVX\/aJZHoEct1zvHlpJz1v004Zn4\/sj6VOzVKlgTUIuQ17KtuyLgWGkSo08oqMQ2Z232vZeCjLeOamEW\/uC9gdLXt5icLh7bmcep+Wslr7NqVMdXTpFguZs1QnTTfbXfyj2tiFKuQymwsoBHgJwrMN1T\/2H9hE69Q2sSh7v2YDZm2zyy0kt7zXbuA11iO0cXdySCKSdmw0JJFrD9eEcEHf1SfvykZi8MLFSMt7G9yd1+G7jBNp7jumyhFpikaaKLKFNwPG+pPfONhYL+IPW3zKeX70lZrot7b5xQxNXDslXDsUYXBtuIvcBgdCO0fSVpncrGq4nFUcJTz1Tbko1ZjyUcZT8d0tqVz2z1dAG4p30Ntxf8R7t3dpeVLH7Qq1nL1GLMefDuA3Ad0QC63Jj0m5bXyn0wIFqKXP433eS7\/W0d4Ha71DeoxY9+4eA3CUalV5R\/hazXFpNjTHJpuBqgyao0swlU2BW0u0tNPEKqdY7BUHxHieSgase4SY0ypdKETxWIp0tWNidyjVj4D7nSQ+L6RMxtRGUD4j758BuX5nvjGmM2puSdbkkknnffLkYZcn8PsTtOpUNh2F5A6nxb9LTzCixnNKid0e4fDG8bK3azbB251YCPcpwP4f1EtqMCAQbg7jM6yWbuN\/pf7Se6P7UCkU2PZY9n+Unh4feXKxzx+4tEIQlsmV+0PElsaVO6migeYLE\/Mekp2269Nnr02UN\/D4RbMQCA+e9xc7wDof5TLn0+ULjwW90rTY25AkH+mUDFg9RjMVVLBmrFFp2HaprTUIQ3BVDN68zJndaZdQ19n9EZqjcrEeYl6tKh0RTq6zrzpKfQ\/3lxUaTHLt6HH\/qaGkTc2vbXx7pGdLtsumBq5CQzWS\/4czAN52J9ZOlrC3OQ208GuIb+Ht2TZqlvwKwIPcWYZR3B+UUPLqqL0L6OnEN1ji1JTv\/ABEcBNTWyqFUWA0AnCUFpqERQqgWAAsAJ7h64V1ci4Vgbc7G8du6WM8Z6RvTfaLI2HwdGmOtcHrC19xQMSOVs57XMEcIbW2imEoqxvmZGNhv400t3AlT3kjukfiBWxG1KmLqqUpWCKLgnILCwt3XPiYy6RY3+IxlJFFwLM4t2QqXKrbgBpp3Ca+t2\/xy\/vqT7tSuw6ISggtYt2yDvu2uvyknUq3jHPBX3zB2lUqi7k93oNwnGHqXa\/AA+pjTEVOA84dfYaboDZ2WGv73xpiHsL8l9TEjX3xOs11t++6B7evSFhfefCRuK2aWu4AFlNjYXNxoPW0dVauZgAdAIjtLE2QBb3JAAHy+ccTdaQNDAMwvaOdqbONKirvoC9vE5SftLW9KlR1qMq8dSNPKV\/phXFemuUPkUOwLDKrEAe7ffpfdKnus89Y47VQVC2ijz\/SOMPs9t5vOdiVrNqLy3Yane0duk4zaJwmzTxElaOFCx5rwiNetlOUWLnnuA5nu085PbT1ifLtTqVUkBidyd34mPwjlxPDnOztNqxDMbkaAHco5KBoBKoMTdjrc31PMyZwUqTTDLO5LDgsOGNxpJmlhcoJO4b+6R+xVzDTfJ2hUVR29WOgUC5N7i1v2I0OaNLWO6ZANlFz9PzHcPrEaFBm3nKtzZQdfAsPoPUyQpoAAALAcoEa1MIW946a9kaDz4n6d0UwuEVQAFAA4WGkc1d14kH07oyXXCVc6K34lB9RPZ7hhZFH8o+k8mjnZ37VcNarSq\/iTJ\/6kn\/v8pnPSetUqYQYdEuc41FtAWub6+HoJr3tRwubCBwNUqA+RBH1tMpRryLdVvjPLFE7PxJFeieagN5jIf+Yl9TXT1mb0KR6+34Xb0clgde8tr3TRtnNmRX\/EoP2+t5nk6uG+tOMTUCBqjmyqLnnpwA4k7olsmgUVnf8AzKjZm\/l0sqDuUaeNzxiOOHWV1pfClqr95ueqX1DN\/sXnHtVpLT7FV4i7QLRKo0DJ1G0jTcYu9yL2Nhxtp6xs5gT0tPM05BnBMA5rGIF51UMbkxk6zT16mkTnDtEZPNac0sVkqo\/4T6XBF\/K9\/KcVGjWuOMqdpy9zR02JpU2uiZ3Hx1DnN+YvoPICIYzra6uSSbKxvysCfLS4krsLDU3pOWF2DceRF\/PWS9JVIC2AB0sOUW9DW4p3R\/YhNqhtYgEeEtlCgBEtkUrUKQO8IFPiosfpHDtaK1WM1CGMqLTQudw+Z4CUzFY9mLG+rfTlJHb+MNR8o91dB3nift5d8iMkuRhyZbuiuzxY6yfoYgecr1G4MmcLTRTere3dvjZrZ0fZ2ewG7W\/2MuGFwtrltWNrm1vIchr+t5Veg2IW1ZluUzhUJG8DefU28pcUYb7wKlUpWnp8bCeb985c2jJ01vGJJ2mRfxMo9SBOGqRzsekGxFMHgSw78oJ+0BV4hCE0c5ltnBddQqUvxKQPHh87TAcQpR2U7wbT6LmKe0rZ3U4tiB2XAcee\/wCYMjJrxX6VNVtWDcGGU+Pwn1085YujO0QadXPoKTE35KwzfIh5XxqCPTx4TrYtYNWakbZa4ViPy3Yr5kkesi9Ojjusll2apyNUYWaqxqEcgQAi+SBR43itWK1dABEWkOnTmlTZjZVLHkAT9JLbE2ewxCiqluwzgG3DQEjxPHlF+jWJyU35l\/oBE8RtAnEMw4UwvqxM2xw6rk5Oa7uMSHS\/EAYYqPiZR6HN\/wBZQqkmtu4gsqg\/iJ9Bb7yLweEetUFNALnnoABvJMXJ\/sr4\/rj3TQmDyefYATD1qtRlYqFyZHutybG+neJDVMHVCdYabhLXzZTa3O\/KRcbGszxvRiTrEmnROs6oUHqMQisxAJIAvoN58IlG+WcMYsWiDmBuGiDoLRZojVMEnGx6xDOoNrgfW33Es2BwwUBmNzwEp2BfLWU89PXd8wJcw0KeJjTq2NRfw1G9HPWL6BwPKNcfXKoTxOg+5\/fdF8eMtbudAfNDY\/Jl9JCbWxF2yjcPrCQsstRGPE7RQzwrLcz2joQeRk1iselSm50Vgpso3ltyi\/K9r90gjTPOLYOj\/iKTdgDmI3DQ\/r94BouxtkFVpindciWJ4Ppr43PpLLh1yjXUyobN27UJtksDuJ3Wk\/Srk66kwJLrXnlR9Y1w9zHyYbW59Of6CAN8pJsOG8kaDuHM90mOjNmrkLuprdjpcs3ZUG3dm9JXNt7ZCKQDa29uXhzPfLD7NsC60HrVAQ9Z75T8CKLIvjqSe9jHO05dLfCEJowEz\/2t4ANSp1QNVJUnuOo+80CRHSzB9bhKyWuchYeK6\/aK9Kxuq+fLbxOMJh7VEJ3GoPIXsfmSYviUsYk9yhUG1wRMnSuaIwFmNyOPOc1TaI7Mx\/W0Edt9iGG+zLo3lcX8CJ3iG7vWZu2e4Uw2PCXUjQ63HDS27yndOqpqMcwtlU3v3mReIO7wiIPfNMeSyMM\/j45W0+2pXVioU3tfdu1tx8onsvFilUzG9iCptv14\/KMxBheK523aseKTDxP86Jh6lNagbMV4WOhHAya\/jiXFVUqOmS1kcFSLWKmmZUWERW4OhI8JU5GeXBv7SmMfNgqSqL5arHQbgc519RJXC1aaYtsqhVbDblFrnNru52lcWuye4xHh+kRbaVQOKhN2Ay7hqORt4xzOJz4svcn\/AH\/1IYHBUK7VGUVadKminIO27Mb+7fwiGK2F26QpuSlYsFLqVZWUG6uvlvEQwe1sjsclkdcrKhK+akbjqYrV2ovWUWD1iqPmIqENYbrqRruJh+uhfOVH7UwRotlLIx19w3tY210Fj+kj2MebUcPVqMpupYkbxv13GMLyL20x3qbI1CRrxlzwNUFVccQJTKpkxsLF9gKeGb9+hEVXj2e7fqWVWB1VrjvBBBH0PlKve+p3mSO2sRme34dIwAjjHku68tOgs9AnYEpmTZDwF5I4anSqD3jTOgy20NtL3HM3MYs1tZJYXE07AVEueJGhvxgEzsxsgCsQQNxlg2VjqZqrTDC7e6Cd510HM6GV\/B1MOy7yD3\/rGGwaS\/xHXllISzixbMFzqLgL+a194hCy6anTVKZuTrzO8\/lX7mRm2tqgKbmwPDezHlpvPcIxp4itUFqVMi\/x1OyPQ9o+kkdn7EVCKtVs7\/iO5fyLw8dTAGWy9jmowq1tAO0qfh5Fubd3Dx3adshQKKW3EXHgdR8rSh4rE9Yy0k0BIHjc2mi0qYVQo3AADwAtKxZ8juEIS2QnjC+hnsIBg3SzZXU4ipT4BtPynVfkRK+brumo+1jCANSqgasGQ95XUDxtm9O6ZfVOsyvqurG7mzrZ+K6sm\/utvHeOIHhv8BLDhtph7C6tYAd4sb7pUiJ2BFppMvWqtlWgGG708Bw8vnG38H6yDp4iovuu487j0OkkKG2ao3hG8QQfUafKTppOSF\/4XWHURSlttPjpMPykN9bRymPw7fHl\/MGHzIt84tL88b9o96MQelJ9KCP7jq\/5WB+hiFbZ510gpCZYxxNO0nqmFPKNMRhriAQdp0xjh6GsQqrBJBm1jSq1o5riMKkaaSqVI72fVZb6akaDw5\/vhE6VGLYhctItfUkED+QGx9b38o0W69kd+s7VZzTMVUSmIECIpaeWiMk6bhzI\/U\/KSKY3nTB8ozBs47rn7fePBXvvEAedYj0zemBm09N5+vqJY+hWFKMW0UOlQCmOSpmzeOl\/KQGEwvWZSTZBrbQnX6bpZ8FlXLlvoCAbnQEEEeYJEcpZTcTtHEADmf35RDGYotxjU1J5eA0lOjNHPiafcS3oLj52miyn9B8GczVSNLZQeZuL\/SXCXj0x5L7EIQlMxCEIA12js+nXQ06qhlJBtyI3EEbjKbj\/AGX4drmnVqIe+zD0sD85fIRaOZWdMhxvsvxS\/wCW9KoPEqfQi3zkJiuiGNpe9h3I5qMw\/wCN5vMIvGLnLXzo+GZdGUg8iCPrPFpeU+iK1BXFmVWHIgH6yMxPRjCPvoIPyjL\/AE2i8FzljDRTM7WnNcxHQLCt7udPA3HzEi8T7PD8FUH8wI+YvJ8aqcmLNnwgO9QfKd03qJ7tWoO7MSPRriXHE9B8Su5Q35WH0MiMXsKunvU2Hip+sWlTKfSLO0643lG8V\/8AyRODthvipDyb7EfeKVMKw3qY0rUe6LUX55f11UxtM7wy+Iv\/AEkxpWemdzDz0+sHpRvVpw0f5K5r0Y1\/h529Lu1H0nNu8+pho\/yf8cOoF78N4+0aPULXvxjtU3qe8g+m\/wBI0VecbPLLbzDHS3LSOkEaKtm7j9Y7URpKCCie2nqCIwtBsxPgPlf7x1TwZO82HHwjbD1Dbjrr+nyj3B0Ga5y3toQT++6AS9CiF0B0kvhV4d0jcHh9RYbt8nMDhGchUBYnl+90AKayf2D0eatZ3utP5t4d3fJfYvRVUs1azNwXgPHn4bvGWYCXMf6yy5P44w9BUUIosoFgIpCEtiIQhACEIQAhCEAIQhACEIQAhCEAIQhAG1fAUn9+mjeKg\/ORWL6H4R\/9PL+UkfI3EnoRaOWxRMZ7NaR1p1WXuZQfmLSBx3s1xI9xqb+dj8x95rMIvGKnJkwPaHQ7GUtTQcgcVGYf8byv4jDspsVIPeLT6ciVfDI4s6Kw5MoP1i8VTlfL1QHfGzGfR+O6FYCr72GQHml0\/oIlfxvslwb+5UrJ5qw+Yv8AOLxqvyRht47pNNC2n7GqwuaGJR+51KH1GYSs4voHtKjo2GZx+KmVf5Kb\/KLVVMpUMTOkqEAlRc2nOJwlan\/mUqiX\/GjL\/UBG6VjcAXuSPkQf0iUncNiyQAE1AAvax0FpI4SgSAToeP19dZJbH6L43FZWNHIhscz9nTmBv+U0jYXQ6hQszDrH5kdkeC\/cypjam5yKz0d6LPVAJGSnvuRq3gDvl\/2fs6nRXLTW3M8T4mO4S5NMMs7RCEI0iEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhACEIQDxlB0IvG\/wD46jmz9VTzjQNkXMPO14QgDmEIQAhCEAIQhACEIQAhCEA\/\/9k=",
        "color": "#096fab",
        "time": "2025-10-21T13:34:09+02:00"
    },
    "truckful": {
        "definition": "Truckful = as much as a truck can hold = a lot\n\ud83d\udca1 Tip for movies:\nOften used in action, crime, or delivery scenes to show huge quantities being moved.",
        "color": "#096fab",
        "time": "2025-10-21T13:36:18+02:00"
    },
    "backscratching": {
        "definition": "giving favors to get favors. \n1\ufe0f\u20e3 Literal meaning:\nScratching someone\u2019s back.\nExample: \u201cHe\u2019s backscratching because his back itches.\u201d \u2192 Just literal.\n2\ufe0f\u20e3 Figurative meaning (common in movies, politics, business):\nMutual help \/ favors exchanged for personal benefit.\nVery similar to: \u201cOne hand washes the other\u201d or \u201cYou scratch my back, I\u2019ll scratch yours.\u201d",
        "color": "#096fab",
        "time": "2025-10-21T13:38:05+02:00"
    },
    "loop": {
        "definition": "ggg",
        "color": "",
        "time": "2025-10-21T14:07:54.909Z"
    },
    "colony": {
        "definition": "tunsia was an paris colony (france)",
        "color": "#096fab",
        "time": "2025-10-21T20:01:48+02:00"
    },
    "floating up": {
        "definition": "??",
        "color": "#FF0000",
        "time": "2025-10-23T09:57:31+02:00"
    },
    "i figure that's the good lord telling me to get my ass back across the vermont line.": {
        "definition": "??",
        "color": "",
        "time": "2025-10-22T09:36:06.230Z"
    },
    "lights out": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-22T15:39:48+02:00"
    },
    "i figure that's the good lord telling me to get my ass back across the vermont line": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-22T11:40:00+02:00"
    },
    "get right": {
        "definition": "??",
        "color": "#FF0000",
        "time": "2025-10-22T11:42:16+02:00"
    },
    "application": {
        "definition": "the doucument he fill like legal document",
        "color": "yellow",
        "time": "2025-10-22T11:45:34+02:00"
    },
    "westfield": {
        "definition": "????",
        "color": "#FF0000",
        "time": "2025-10-22T11:48:05+02:00"
    },
    "threw down on": {
        "definition": "NN",
        "color": "#FF0000",
        "time": "2025-10-22T11:48:53+02:00"
    },
    "running up": {
        "definition": "????",
        "color": "#FF0000",
        "time": "2025-10-22T15:40:04+02:00"
    },
    "rifle out": {
        "definition": "??????",
        "color": "#FF0000",
        "time": "2025-10-22T11:51:06+02:00"
    },
    "right up": {
        "definition": "N???",
        "color": "#FF0000",
        "time": "2025-10-22T11:50:15+02:00"
    },
    "feeling off": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-23T10:00:09+02:00"
    },
    "show up": {
        "definition": "VVV",
        "color": "#FF0000",
        "time": "2025-10-22T15:19:25+02:00"
    },
    "pissed off": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-22T15:20:34+02:00"
    },
    "put it down": {
        "definition": "?",
        "color": "#FF0000",
        "time": "2025-10-22T15:51:45+02:00"
    },
    "abyss": {
        "definition": "??",
        "color": "#096fab",
        "time": "2025-10-23T09:57:42+02:00"
    },
    "look around": {
        "definition": "???",
        "color": "green",
        "time": "2025-10-22T19:40:41+02:00"
    },
    "pinpoint": {
        "definition": "???",
        "color": "#FF0000",
        "time": "2025-10-23T00:23:18.876Z"
    },
    "let language = \"english\";\nlet path = \"http:\/\/localhost\";\nlet wordcolors = {};\nlet lastclipboardtext = \"\";\n\n\/\/ load colors from storage\nchrome.storage.local.get(\"wordcolors\", (data) => {\n  if (data.wordcolors) wordcolors = data.wordcolors;\n});\n\n\/\/ broadcast color updates to all tabs\nfunction broadcastcolorsupdate() {\n  chrome.tabs.query({}, (tabs) => {\n    for (const tab of tabs) {\n      chrome.tabs.sendmessage(tab.id, {\n        type: \"update_word_colors\",\n        wordcolors\n      });\n    }\n  });\n}\n\n\/\/ listen for messages from content scripts\nchrome.runtime.onmessage.addlistener((message, sender, sendresponse) => {\n  if (message.type === \"updatecolors\") {\n    wordcolors = message.wordcolors;\n    chrome.storage.local.set({ wordcolors }, () => {\n      broadcastcolorsupdate();\n      sendresponse({ success: true });\n    });\n    return true;\n  }\n\n  if (message.type === \"clipboardtext\") {\n    const word = message.text.trim();\n    if (!word || word === lastclipboardtext) return;\n    lastclipboardtext = word;\n\n    const time = new date().toisostring();\n\n    fetch(`${path}\/${language}\/php\/saveword.php`, {\n      method: \"post\",\n      headers: { \"content-type\": \"application\/json\" },\n      body: json.stringify({ word, definition: \"\", time })\n    })\n      .then(res => res.json())\n      .then(async (data) => {\n        const [activetab] = await chrome.tabs.query({ active: true, currentwindow: true });\n        if (activetab?.id) {\n          \/\/ show toast notification\n          chrome.scripting.executescript({\n            target: { tabid: activetab.id },\n            func: (msg) => {\n              const toast = document.createelement(\"div\");\n              toast.textcontent = msg;\n              toast.style.csstext = `\n                position: fixed;\n                top: 20px;\n                left: 20px;\n                background: rgba(0,0,0,0.85);\n                color: #fff;\n                padding: 15px 20px;\n                border-radius: 8px;\n                font-size: 28px;\n                z-index: 2147483647;\n                opacity: 0;\n                transition: opacity 0.3s;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n              `;\n              document.body.appendchild(toast);\n              requestanimationframe(() => { toast.style.opacity = \"1\"; });\n              settimeout(() => {\n                toast.style.opacity = \"0\";\n                toast.addeventlistener(\"transitionend\", () => toast.remove());\n              }, 4000);\n            },\n            args: [`\u2705 sent: ${data.word} @ ${data.time || time}`]\n          });\n\n          \/\/ trigger underline in content script\n          chrome.tabs.sendmessage(activetab.id, {\n            type: \"underlineword\",\n            word: data.word || word\n          });\n        }\n      })\n      .catch(err => console.error(\"send failed:\", err));\n  }\n});": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:00:20.161Z"
    },
    "let language = \"english\";\nlet path = \"http:\/\/localhost\";\nlet wordcolors = {};\nlet lastclipboardtext = \"\";\n\n\/\/ load colors from storage\nchrome.storage.local.get(\"wordcolors\", (data) => {\n  if (data.wordcolors) wordcolors = data.wordcolors;\n});\n\n\/\/ broadcast updated colors to all tabs\nfunction broadcastcolorsupdate() {\n  chrome.tabs.query({}, (tabs) => {\n    for (const tab of tabs) {\n      chrome.tabs.sendmessage(tab.id, {\n        type: \"update_word_colors\",\n        wordcolors\n      });\n    }\n  });\n}\n\n\/\/ handle messages from content scripts\nchrome.runtime.onmessage.addlistener((message, sender, sendresponse) => {\n  if (message.type === \"updatecolors\") {\n    wordcolors = message.wordcolors;\n    chrome.storage.local.set({ wordcolors }, () => {\n      broadcastcolorsupdate();\n      sendresponse({ success: true });\n    });\n    return true;\n  }\n\n  if (message.type === \"clipboardtext\") {\n    const word = message.text.trim();\n    if (!word || word === lastclipboardtext) return;\n    lastclipboardtext = word;\n\n    const time = new date().toisostring();\n\n    fetch(`${path}\/${language}\/php\/saveword.php`, {\n      method: \"post\",\n      headers: { \"content-type\": \"application\/json\" },\n      body: json.stringify({ word, definition: \"\", time })\n    })\n      .then(res => res.json())\n      .then(async (data) => {\n        const [activetab] = await chrome.tabs.query({ active: true, currentwindow: true });\n        if (activetab?.id) {\n          \/\/ show toast notification\n          chrome.scripting.executescript({\n            target: { tabid: activetab.id },\n            func: (msg) => {\n              const toast = document.createelement(\"div\");\n              toast.textcontent = msg;\n              toast.style.csstext = `\n                position: fixed;\n                top: 20px;\n                left: 20px;\n                background: rgba(0,0,0,0.85);\n                color: #fff;\n                padding: 15px 20px;\n                border-radius: 8px;\n                font-size: 28px;\n                z-index: 2147483647;\n                opacity: 0;\n                transition: opacity 0.3s;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n              `;\n              document.body.appendchild(toast);\n              requestanimationframe(() => { toast.style.opacity = \"1\"; });\n              settimeout(() => {\n                toast.style.opacity = \"0\";\n                toast.addeventlistener(\"transitionend\", () => toast.remove());\n              }, 4000);\n            },\n            args: [`\u2705 sent: ${data.word} @ ${data.time || time}`]\n          });\n        }\n      })\n      .catch(err => console.error(\"send failed:\", err));\n  }\n});": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:03:30.506Z"
    },
    "clipboard read failed: error: extension context invalidated.": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:04:43.976Z"
    },
    "let language = \"english\";\nlet path = \"http:\/\/localhost\";\nlet wordcolors = {};\nlet lastclipboardtext = \"\";\n\n\/\/ load saved word colors from local storage\nchrome.storage.local.get(\"wordcolors\", (data) => {\n  if (data.wordcolors) wordcolors = data.wordcolors;\n});\n\n\/\/ broadcast updated word colors to all tabs\nfunction broadcastcolorsupdate() {\n  chrome.tabs.query({}, (tabs) => {\n    for (const tab of tabs) {\n      chrome.tabs.sendmessage(tab.id, {\n        type: \"update_word_colors\",\n        wordcolors\n      });\n    }\n  });\n}\n\n\/\/ listen for messages from content scripts\nchrome.runtime.onmessage.addlistener((message, sender, sendresponse) => {\n  if (message.type === \"updatecolors\") {\n    wordcolors = message.wordcolors;\n    chrome.storage.local.set({ wordcolors }, () => {\n      broadcastcolorsupdate();\n      sendresponse({ success: true });\n    });\n    return true;\n  }\n\n  if (message.type === \"clipboardtext\") {\n    const word = message.text.trim();\n    if (!word || word === lastclipboardtext) return;\n    lastclipboardtext = word;\n\n    const time = new date().toisostring();\n\n    fetch(`${path}\/${language}\/php\/saveword.php`, {\n      method: \"post\",\n      headers: { \"content-type\": \"application\/json\" },\n      body: json.stringify({ word, definition: \"\", time })\n    })\n      .then(res => res.json())\n      .then(async (data) => {\n        const [activetab] = await chrome.tabs.query({ active: true, currentwindow: true });\n        if (activetab?.id) {\n          \/\/ show toast notification on active tab\n          chrome.scripting.executescript({\n            target: { tabid: activetab.id },\n            func: (msg) => {\n              const toast = document.createelement(\"div\");\n              toast.textcontent = msg;\n              toast.style.csstext = `\n                position: fixed;\n                top: 20px;\n                left: 20px;\n                background: rgba(0,0,0,0.85);\n                color: #fff;\n                padding: 15px 20px;\n                border-radius: 8px;\n                font-size: 28px;\n                z-index: 2147483647;\n                opacity: 0;\n                transition: opacity 0.3s;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n              `;\n              document.body.appendchild(toast);\n              requestanimationframe(() => { toast.style.opacity = \"1\"; });\n              settimeout(() => {\n                toast.style.opacity = \"0\";\n                toast.addeventlistener(\"transitionend\", () => toast.remove());\n              }, 4000);\n            },\n            args: [`\u2705 sent: ${data.word} @ ${data.time || time}`]\n          });\n        }\n      })\n      .catch(err => console.error(\"send failed:\", err));\n  }\n});": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:07:08.039Z"
    },
    "wake": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:07:26.036Z"
    },
    "if (!word || word === lastclipboardtext) return;": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:10:52.161Z"
    },
    "let lastclipboardtext = \"\";\nlet pollingstarted = false;\nlet pollinterval;\n\nfunction checkclipboard() {\n  try {\n    navigator.clipboard.readtext().then(text => {\n      const trimmed = text.trim();\n      if (trimmed && trimmed !== lastclipboardtext) {\n        lastclipboardtext = trimmed;\n        chrome.runtime.sendmessage({ type: \"clipboardtext\", text: trimmed });\n      }\n    }).catch(err => {\n      console.warn(\"clipboard read failed:\", err);\n      if (err.message.includes(\"context invalidated\")) {\n        clearinterval(pollinterval);\n        pollingstarted = false;\n      }\n    });\n  } catch (err) {\n    console.warn(\"clipboard access error:\", err);\n  }\n}\n\nfunction startpolling() {\n  if (pollingstarted) return;\n  pollingstarted = true;\n  pollinterval = setinterval(checkclipboard, 2000);\n}\n\nwindow.addeventlistener(\"click\", startpolling);\nwindow.addeventlistener(\"keydown\", startpolling);": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:12:06.975Z"
    },
    "let language = \"english\";\nlet path = \"http:\/\/localhost\";\nlet wordcolors = {};\nlet lastclipboardtext = \"\";\n\n\/\/ load saved word colors\nchrome.storage.local.get(\"wordcolors\", (data) => {\n  if (data.wordcolors) wordcolors = data.wordcolors;\n});\n\n\/\/ broadcast updated colors to all tabs\nfunction broadcastcolorsupdate() {\n  chrome.tabs.query({}, (tabs) => {\n    for (const tab of tabs) {\n      chrome.tabs.sendmessage(tab.id, {\n        type: \"update_word_colors\",\n        wordcolors\n      });\n    }\n  });\n}\n\n\/\/ listen for messages\nchrome.runtime.onmessage.addlistener((message, sender, sendresponse) => {\n  if (message.type === \"updatecolors\") {\n    wordcolors = message.wordcolors;\n    chrome.storage.local.set({ wordcolors }, () => {\n      broadcastcolorsupdate();\n      sendresponse({ success: true });\n    });\n    return true;\n  }\n\n  if (message.type === \"clipboardtext\") {\n    const word = message.text.trim();\n    if (!word || word === lastclipboardtext) return;\n    lastclipboardtext = word;\n\n    const time = new date().toisostring();\n\n    fetch(`${path}\/${language}\/php\/saveword.php`, {\n      method: \"post\",\n      headers: { \"content-type\": \"application\/json\" },\n      body: json.stringify({ word, definition: \"\", time })\n    })\n      .then(res => res.json())\n      .then(async (data) => {\n        const [activetab] = await chrome.tabs.query({ active: true, currentwindow: true });\n        if (activetab?.id) {\n          chrome.scripting.executescript({\n            target: { tabid: activetab.id },\n            func: (msg) => {\n              const toast = document.createelement(\"div\");\n              toast.textcontent = msg;\n              toast.style.csstext = `\n                position: fixed;\n                top: 20px;\n                left: 20px;\n                background: rgba(0,0,0,0.85);\n                color: #fff;\n                padding: 15px 20px;\n                border-radius: 8px;\n                font-size: 28px;\n                z-index: 2147483647;\n                opacity: 0;\n                transition: opacity 0.3s;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n              `;\n              document.body.appendchild(toast);\n              requestanimationframe(() => { toast.style.opacity = \"1\"; });\n              settimeout(() => {\n                toast.style.opacity = \"0\";\n                toast.addeventlistener(\"transitionend\", () => toast.remove());\n              }, 4000);\n            },\n            args: [`\u2705 sent: ${data.word} @ ${data.time || time}`]\n          });\n        }\n      })\n      .catch(err => console.error(\"send failed:\", err));\n  }\n});": {
        "definition": "",
        "color": "",
        "time": "2025-10-23T15:14:10.433Z"
    },
    "walked out": {
        "definition": "gf",
        "color": "",
        "time": "2025-10-23T15:30:36.583Z"
    }
}